/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SinglyLinkedLists;

public class App {

  ////////////////////////////////////// code challenge 08 method ///////////////////////////////////////////////
  public static LinkedList zipLists(LinkedList ll1, LinkedList ll2) {
    LinkedList out = new LinkedList();
    Node current1 = ll1.head;
    Node current2 = ll2.head;

    while (current1 != null || current2 != null) {
      if (current1 == null) {
        out.append(current2.data);
        current2 = current2.next;
      } else if (current2 == null) {
        out.append(current1.data);
        current1 = current1.next;
      } else {
        out.append(current1.data);
        out.append(current2.data);

        current1 = current1.next;
        current2 = current2.next;
      }
    }
    return out;
  }

  ////////////////////////////////////// code challenge 09 ///////////////////////////////////////////////
  public static LinkedList reversedList(LinkedList list) {
    Node prev = null;
    Node current = list.head;
    Node next = null;

    while (current != null) {
      next = current.next;
      current.next = prev;
      prev = current;
      current = next;
    }
    list.head = prev;
    return list;
  }

  public static void main(String[] args) throws Exception {
    ////////////////////////////////////// code challenge 05 ///////////////////////////////////////////////
//    LinkedList list1 = new LinkedList();
//    // insert
//    list1.insert(1);
//    list1.insert(2);
//    list1.insert(3);
//    list1.insert(50);
//    list1.insert(4);
//    list1.insert(100);
//    list1.insert(300);
//    // see the list
//    Node current = list1.head;
//    while (current != null) { // if i didn't reach the end of the list
//      System.out.println(current.data);
//      current = current.next;
//    }
//
//    //includes
//    System.out.println(list1.includes(300));
//
//    // to string
//    System.out.println(list1.toStr());

    ////////////////////////////////////// code challenge 06 ///////////////////////////////////////////////
    // append
//    LinkedList list2 = new LinkedList();
//    list2.append(5);
//    list2.append(3);
//    list2.append(4);
//    list2.append(10);
//    System.out.println("------------------append---------------------");
//    System.out.println(list2.toStr());
//
//    //insert before
//    list2.insertBefore(5,2); // insert before the head
//    list2.insertBefore(4,20); // insert before any number in the list
//    list2.insertBefore(10,23); // insert before the tail
//    list2.insertBefore(55,5); // insert before number that does not exist in the list (nothing will happen)
//    System.out.println("------------------insert before---------------------");
//    System.out.println(list2.toStr());
//    System.out.println("the head is -> "+list2.head.data); // check the head
//
//
//    //insert after
//    list2.insertAfter(2,100); // insert after head
//    list2.insertAfter(3,60); // insert after any number in the list
//    list2.insertAfter(10,77); // insert after the tail
//    list2.insertAfter(1,22); // insert after number that does not exist in the list (nothing will happen)
//    System.out.println("------------------insert after---------------------");
//    System.out.println(list2.toStr());
//    System.out.println("the tail is -> "+list2.tail.data); // check the tail

    ////////////////////////////////////// code challenge 07 ///////////////////////////////////////////////
//    try {
//      LinkedList list3 = new LinkedList();
//      list3.append(1);
//      list3.append(3);
//      list3.append(8);
//      list3.append(2);
//      System.out.println(list3.kthFromEnd(6));
//    } catch (Exception e) {
//      e.printStackTrace();
//    }

    ////////////////////////////////////// code challenge 08 ///////////////////////////////////////////////
//    LinkedList list4 = new LinkedList();
//    list4.append(1);
//    list4.append(3);
//    list4.append(2);
//    LinkedList list5 = new LinkedList();
//    list5.append(5);
//    list5.append(9);
//    list5.append(4);
//
//    System.out.println(zipLists(list4,list5).toStr());

    ////////////////////////////////////// code challenge 09 ///////////////////////////////////////////////

    LinkedList list4 = new LinkedList();
    list4.append(1);
    list4.append(2);
    list4.append(3);

    System.out.println(reversedList(list4).toStr());

  }
}
