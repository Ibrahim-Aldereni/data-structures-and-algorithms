/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package insertionSort;

import com.google.common.collect.ObjectArrays;

import java.net.CookieHandler;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;

public class App {
  ////////////////////////////////////// Challenge: 26 //////////////////////////////////////
  public static int[] selectionSort(int[] arr) {
    for (int i = 0; i < arr.length + 1; i++) {
      for (int j = i + 1; j < arr.length; j++) {
        if (arr[j] < arr[i]) {
          int num = arr[i];
          arr[i] = arr[j];
          arr[j] = num;
        }
      }
    }
    return arr;
  }

  public static int[] insertionSort(int[] arr) {
    for (int i = 1; i < arr.length; i++) {
      int j = i - 1;
      int temp = arr[i];

      while (j >= 0 && temp < arr[j]) {
        arr[j + 1] = arr[j];
        j = j - 1;
      }
      arr[j + 1] = temp;
    }
    return arr;
  }

  ////////////////////////////////////// Challenge: 27 //////////////////////////////////////
  private static void merge(int[] left, int[] right, int[] arr) {
    int i = 0, j = 0, k = 0;

    while (i < left.length && j < right.length) {
      if (left[i] <= right[j]) {
        arr[k++] = left[i++];
      } else {
        arr[k++] = right[j++];
      }
    }
    while (i < left.length) {
      arr[k++] = left[i++];
    }
    while (j < right.length) {
      arr[k++] = right[j++];
    }
  }


  public static int[] mergeSort(int[] arr) {
    int n = arr.length;
    if (n > 1) {
      int mid = n / 2;
      int[] left = new int[mid];
      int[] right = new int[n - mid];

      // split arr to 2 arrays left and right
      for (int i = 0; i < mid; i++) {
        left[i] = arr[i];
      }
      for (int i = mid; i < n; i++) {
        right[i - mid] = arr[i];
      }

      mergeSort(left);
      mergeSort(right);

      merge(left, right, arr);
    }
    return arr;
  }

  ////////////////////////////////////// Challenge: 28 //////////////////////////////////////
  private static int partition(int[] arr, int start, int end) {
    int pivot = arr[end];
    int i = (start - 1);

    for (int j = start; j < end; j++) {
      if (arr[j] <= pivot) {
        i++;

        int swap = arr[i];
        arr[i] = arr[j];
        arr[j] = swap;
      }
    }

    int swap = arr[i + 1];
    arr[i + 1] = arr[end];
    arr[end] = swap;

    return i + 1;
  }

  public static int[] quickSort(int[] arr, int start, int end) {
    if (start < end) {
      int position = partition(arr, start, end);

      quickSort(arr, start, position - 1);
      quickSort(arr, position + 1, end);
    }
    return arr;
  }


  public static void main(String[] args) {
    ////////////////////////////////////// Challenge: 26 //////////////////////////////////////
//    // normal case
//    int[] arr = {8, 4, 23, 42, 16, 15};
//    // Reverse-sorted
//    int[] arr2 = {20, 18, 12, 8, 5, -2};
//    // Nearly-sorted
//    int[] arr3 = {2, 3, 5, 7, 13, 11};
//    // Few uniques
//    int[] arr4 = {5, 12, 7, 5, 5, 7};
//    System.out.println(Arrays.toString(insertionSort(arr)));
//    System.out.println(Arrays.toString(insertionSort(arr2)));
//    System.out.println(Arrays.toString(insertionSort(arr3)));
//    System.out.println(Arrays.toString(insertionSort(arr4)));

    ////////////////////////////////////// Challenge: 27 //////////////////////////////////////
//    int[] arr = {8, 4, 23, 42, 16, 15};
//    System.out.println(Arrays.toString(mergeSort(arr)));
    ////////////////////////////////////// Challenge: 28 //////////////////////////////////////
    int[] arr = {8, 4, 23, 42, 16, 15};
    System.out.println(Arrays.toString(quickSort(arr,0,5)));
  }
}
