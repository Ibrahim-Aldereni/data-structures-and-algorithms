/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackAndQueue;

import AnimalShelter.*;

import java.util.regex.Pattern;

public class App {
  //////////////////////////////////// challenge 13 ///////////////////////////////////
  public static boolean validateBrackets(String brackets) throws Exception {
    // init stack
    Stack<Character> stack = new Stack<>();
    // this variable to get first character from the string not from the stack(cuz stack top will change)
    Character topValue = null;
    // fill stack with brackets only
    for (int i = 0; i < brackets.length(); i++) {
      if (brackets.charAt(i) == '[' || brackets.charAt(i) == ']' || brackets.charAt(i) == '}' || brackets.charAt(i) == '{' || brackets.charAt(i) == ')' || brackets.charAt(i) == '(') {
        stack.push(brackets.charAt(i));
        topValue = brackets.charAt(i);
      }
    }

    boolean out = false;

    if(!stack.isEmpty()){ // if empty string is entered
      while (stack.top.next != null) { // why top.next?? to keep the last character in the stack
        if ((stack.top.next.value.toString() + stack.top.value.toString()).equals("{}") || (stack.top.next.value.toString() + stack.top.value.toString()).equals("[]") || (stack.top.next.value.toString() + stack.top.value.toString()).equals("()") || (stack.top.next.value.toString() + stack.top.value.toString()).equals(")(") || (stack.top.next.value.toString() + stack.top.value.toString()).equals("][") || (stack.top.next.value.toString() + stack.top.value.toString()).equals("}{")) {
          // here if two character match they will be popped
          stack.pop();
          stack.pop();
          if (stack.top == null) break;
        } else {
          stack.pop();
        }
      }

      if (stack.isEmpty()) { // if stack is empty after the while loop so all brackets match
        out = true;
      } else { // if not so the last one must be compared to the first one to see if they are match
        if ((topValue.toString() + stack.top.value.toString()).equals("{}") || (topValue.toString() + stack.top.value.toString()).equals("}{") || (topValue.toString() + stack.top.value.toString()).equals("[]") || (topValue.toString() + stack.top.value.toString()).equals("][") || (topValue.toString() + stack.top.value.toString()).equals("()") || (topValue.toString() + stack.top.value.toString()).equals(")(")) {
          out = true;
        }
      }
    }

    return out;
  }

  public static void main(String[] args) throws Exception {
    //////////////////////////////////// challenge 10 ///////////////////////////////////
    ////////////////Stack/////////////////
    //push
//    Stack<Integer> st1 = new Stack<>();
//    st1.push(1);
//    st1.push(2);
//    st1.push(3);
//    System.out.println(st1.top.value);
//    System.out.println(st1.top.next.value);

    //pop
//    try {
//      System.out.println(st1.pop());
//      System.out.println(st1.top.value);
//    } catch (Exception e) {
//      System.out.println(e.getMessage());
//    }

    //peek
//    try {
//      System.out.println(st1.peek());
//    } catch (Exception e) {
//      System.out.println(e.getMessage());
//    }
//    //is empty
//    System.out.println(st1.isEmpty());

    ////////////////Queue/////////////////
    //enqueue
//    Queue<String> q1 = new Queue<>();
//    q1.enqueue("a");
//    q1.enqueue("b");
//    q1.enqueue("c");
//    System.out.println(q1.front.value);
//    System.out.println(q1.rear.value);
    //dequeue
//    try {
//      System.out.println(q1.dequeue());
//      System.out.println(q1.front.value);
//    } catch (Exception e) {
//      System.out.println(e.getMessage());
//    }
    //peek
//    try {
//      System.out.println(q1.peek());
//    } catch (Exception e) {
//      System.out.println(e.getMessage());
//    }
    //is empty
//    System.out.println(q1.isEmpty());

    //////////////////////////////////// challenge 11 ///////////////////////////////////
//    //enqueue
//    PseudoQueue<Integer> pq1 = new PseudoQueue<>();
//    pq1.enqueue(20);
//    pq1.enqueue(15);
//    pq1.enqueue(10);
//    pq1.enqueue(5);
//
//    System.out.println(pq1.toString());
//    //dequeue
//    pq1.dequeue();
//    System.out.println(pq1.toString());
//    pq1.dequeue();
//    System.out.println(pq1.toString());
    //////////////////////////////////// challenge 12 ///////////////////////////////////
//    AnimalShelter<Animal> shelter = new AnimalShelter<Animal>();
//    Dog dog1 = new Dog("puppy");
//    Cat cat1 = new Cat("meshmesh");
//    Dog dog2 = new Dog("bolt");
//
//    shelter.enqueue(dog1);
//    shelter.enqueue(dog1);
//    shelter.enqueue(dog2);
//
//    System.out.println(shelter.front.value.name);
//    System.out.println(shelter.rear.value.name);
//    System.out.println(shelter.dequeue("cat").name);

    //////////////////////////////////// challenge 13 ///////////////////////////////////
    System.out.println(validateBrackets("{(})"));
    System.out.println(validateBrackets("{}"));
    System.out.println(validateBrackets("}"));
    System.out.println(validateBrackets(""));
    System.out.println(validateBrackets("{}{Code}[Fellows](())"));
  }
}
